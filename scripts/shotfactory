#!/usr/bin/env python
# browsershots.org
# Copyright (C) 2006 Johann C. Rocholl <johann@browsershots.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston,
# MA 02111-1307, USA.

"""
Screenshot factory.
"""


__revision__ = '$Rev$'
__date__ = '$Date$'
__author__ = '$Author$'


import sys, os, time, xmlrpclib, socket, platform
from md5 import md5


pngfilename = 'browsershot.png'


def log(status, extra=None):
    """
    Add a line to the log file.
    """
    logfile = open('shotfactory.log', 'a')
    logfile.write(time.strftime('%Y-%m-%d %H:%M:%S'))
    logfile.write(' ')
    logfile.write(status)
    if extra is not None:
        logfile.write(' ')
        logfile.write(str(extra))
    logfile.write('\n')
    logfile.close()


def sleep():
    """Sleep a while to wait for new requests."""
    time.sleep(60)


def crypt_password(challenge, password, prefix = ''):
    """
    Encrypt a password for transmission.
    """
    salt = challenge[:4]
    nonce = challenge[4:]
    crypt = md5(salt + password).hexdigest()
    crypt = md5(prefix + crypt + nonce).hexdigest()
    return crypt


def browsershot(server_url, server, options, challenge, password):
    """
    Process a screenshot request and upload the resulting PNG file.
    """
    width = options['width']
    if not width:
        width = 1024
    if width == 1280:
        height = 1024
    else:
        height = width / 4 * 3
    bpp = options['bpp']
    if not bpp:
        bpp = 24
    dpi = 90

    platform_name = platform.system()
    if platform_name == 'Linux':
        from shotfactory03.gui import x11
        gui = x11.X11Gui(width, height, bpp, dpi, display=1)
    elif platform_name == 'Darwin':
        from shotfactory03.gui import darwin
        gui = darwin.DarwinGui(width, height, bpp, dpi)
    elif platform_name == 'Windows':
        from shotfactory03.gui import windows
        gui = windows.WindowsGui(width, height, bpp, dpi)
    else:
        raise NotImplementedError(platform_name)

    # Start browser
    crypt = crypt_password(challenge, password, 'redirect')
    url = '%s/redirect/%s' % (server_url, crypt)
    gui.hide_mouse()
    gui.start_browser(options['browser'], url)

    # Make screenshots
    if os.path.exists(pngfilename):
        os.remove(pngfilename)
    gui.browsershot(pngfilename)
    gui.close()

    # Upload PNG file
    binary = xmlrpclib.Binary(file(pngfilename, 'rb').read())
    crypt = crypt_password(challenge, password)
    status, challenge = server.request.upload(binary, crypt)
    print 'uploaded:', status
    if status != 'OK':
        log(status, options)
    return challenge


def debug_factory_features(server, factory):
    """
    Print the SQL WHERE clause for a given factory, with linebreaks.
    """
    features = server.factory.features(factory)
    start = 0
    nested = 0
    for index in range(len(features)):
        if features[index] == '(':
            nested += 1
            if nested <= 2 and index > 0:
                stop = index
                print features[start:stop].strip()
                start = stop
        elif features[index] == ')':
            nested -= 1
            if nested == 0 and features[index - 1] == ')':
                stop = index
                print features[start:stop].strip()
                start = stop
    rest = features[start:].strip()
    if rest:
        print rest


def error_sleep(message):
    """
    Log error message, sleep a while, get a new challenge.
    """
    if not message[0].isupper():
        message = message[0].upper + message[1:]
    if not message.endswith('.'):
        message += '.'
    print message
    log(message)
    sleep()


def _main():
    """
    Main loop for screenshot factory.
    """
    if len(sys.argv) == 2:
        password = sys.argv[1]
        server_url = 'http://v03.browsershots.org'
    elif len(sys.argv) == 3:
        password = sys.argv[1]
        server_url = sys.argv[2]
    else:
        print "usage: shotfactory <password> [http://v03.browsershots.org]"
    socket.setdefaulttimeout(60.0)
    server = xmlrpclib.Server(server_url)
    factory = socket.gethostname()
    debug_factory_features(server, factory)
    challenge = None
    while True:
        try:
            if not challenge:
                challenge = server.auth.challenge(factory)
            print 'challenge:', challenge
            crypt = crypt_password(challenge, password)
            challenge = None

            poll_start = time.time()
            status, challenge, options = server.request.poll(factory, crypt)
            poll_latency = time.time() - poll_start
            print 'server poll latency: %.2f seconds' % poll_latency

            if status == 'OK':
                print options
                challenge = browsershot(server_url, server, options,
                                        challenge, password)
            elif status == 'No matching request.':
                print status
                sleep()
            else:
                error_sleep(status)
        except socket.gaierror, (errno, message):
            error_sleep('Socket gaierror: ' + message)
        except socket.timeout:
            error_sleep('Socket timeout.')
        except socket.error, error:
            if type(error.args) in (tuple, list):
                (errno, message) = error.args
            else:
                message = str(error.args)
            error_sleep('Socket error: ' + message)
        except xmlrpclib.ProtocolError:
            error_sleep('XML-RPC protocol error.')


if __name__ == '__main__':
    _main()
