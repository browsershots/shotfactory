#!/usr/bin/env python
# browsershots.org
# Copyright (C) 2006 Johann C. Rocholl <johann@browsershots.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston,
# MA 02111-1307, USA.

"""
Screenshot factory.
"""

__revision__ = '$Rev$'
__date__ = '$Date$'
__author__ = '$Author$'

import sys, os, time, xmlrpclib, socket
from shotfactory03.gui import x11
from md5 import md5

pngfilename = 'browsershot.png'

def crypt_password(challenge, password, prefix = ''):
    """
    Encrypt a password for transmission.
    """
    salt = challenge[:4]
    nonce = challenge[4:]
    crypt = md5(salt + password).hexdigest()
    crypt = md5(prefix + crypt + nonce).hexdigest()
    return crypt

def start_vnc_server(options):
    """
    Start a VNC server.
    """
    width = options['width']
    if not width:
        width = 1024
    if width == 1280:
        height = 1024
    else:
        height = width / 4 * 3
    bpp = options['bpp']
    dpi = 90
    command = ('vncserver :1 -geometry %dx%d -depth %d -dpi %d'
               % (width, height, bpp, dpi))
    error = os.system(command)
    assert not error

def browsershot(server_url, server, factory, password, challenge):
    """
    Process a screenshot request and upload the resulting PNG file.
    """
    # Ask server for a matching screenshot request
    crypt = crypt_password(challenge, password)
    status, challenge, options = server.request.poll(factory, crypt)
    if status != 'OK':
        print status
        return
    print options

    start_vnc_server(options)
    gui = x11.X11Gui(display=1)

    # Start browser
    crypt = crypt_password(challenge, password, 'redirect')
    url = '%s/redirect/%s' % (server_url, crypt)
    if options['browser'] == 'Firefox':
        gui.shell('firefox "%s" &' % url)
    elif options['browser'] == 'Konqueror':
        gui.shell('konqueror "%s" &' % url)
    else:
        raise RuntimeError("Unsupported browser: %s" % options['browser'])
    time.sleep(24)
    gui.maximize()
    time.sleep(4)

    # Make screenshots
    if os.path.exists(pngfilename):
        os.remove(pngfilename)
    gui.browsershot(pngfilename)

    # Kill VNC server
    error = os.system('vncserver -kill :1')
    assert not error

    # Upload PNG file
    binary = xmlrpclib.Binary(file(pngfilename).read())
    crypt = crypt_password(challenge, password)
    response = server.request.upload(binary, crypt)
    print response

def debug_factory_features(server, factory):
    """
    Print the SQL WHERE clause for a given factory.
    """
    features = server.factory.features(factory)
    start = 0
    nested = 0
    for index in range(len(features)):
        if features[index] == '(':
            nested += 1
            if nested <= 2 and index > 0:
                stop = index
                print features[start:stop].strip()
                start = stop
        elif features[index] == ')':
            nested -= 1
            if nested == 0 and features[index - 1] == ')':
                stop = index
                print features[start:stop].strip()
                start = stop
    rest = features[start:].strip()
    if rest:
        print rest

def _main():
    """
    Main loop for screenshot factory.
    """
    if len(sys.argv) == 1:
        server_url = 'http://v03.browsershots.org'
    elif len(sys.argv) == 2:
        server_url = sys.argv[1]
    else:
        print "usage: shotfactory [http://v03.browsershots.org]"
    server = xmlrpclib.Server(server_url)
    factory = socket.gethostname()
    debug_factory_features(server, factory)
    password = 'secret'
    challenge = server.auth.challenge(factory)
    print challenge
    browsershot(server_url, server, factory, password, challenge)

if __name__ == '__main__':
    _main()
